package com.example.demo;

import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.List;

import org.junit.Rule;
import org.junit.Test;
import org.junit.jupiter.api.BeforeAll;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.Spy;
import org.mockito.junit.MockitoJUnit;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.MockitoRule;

import com.example.demo.model.AnnoContabile;
import com.example.demo.model.Previsione;


//is possible to instantiate mockito in this method
@RunWith(MockitoJUnitRunner.class)
public class PrevisionaleTest {
	
	//it is also possible to instantiate mockito in this method
//	@BeforeAll
//	public void init() {
//		MockitoAnnotations.initMocks(this);
//	}
// finish method
	
//	at least using another method
//	@Rule
//	public MockitoRule initRule = MockitoJUnit.rule();
//finish other method
	
	
	//using mock annotation to simulate an arraylist
	@Mock
	List<String> mockedList;
	 
	@Test
	public void whenUseMockAnnotation_thenMockIsInjected() {
	    mockedList.add("one");
	    Mockito.verify(mockedList).add("one");
	    assertEquals(0, mockedList.size());
	 
	    Mockito.when(mockedList.size()).thenReturn(100);
	    assertEquals(100, mockedList.size());
	}
	
	@Test
	public void whenNotUseMockAnnotation_thenCorrect() {
	    List<Previsione> mockList = (List<Previsione>) Mockito.mock(Previsione.class);
	    Previsione oprevisione = new Previsione();
	    oprevisione.setAnnodiriferimento("2019/2020");
	    mockList.add(oprevisione);
	    Mockito.verify(mockList).add(oprevisione);
	    assertEquals(1, mockList.size());
	 
	    Mockito.when(mockList.size()).thenReturn(100);
	    assertEquals(100, mockList.size());
	}
	
	
	
	//is a piece of mock
	@Spy
	List<String> spiedList = new ArrayList<>();
	
	@Test
	public void whenUseSpyAnnotation_thenSpyIsInjectedCorrectly() {
	    spiedList.add("one");
	    spiedList.add("two");
	 
	    Mockito.verify(spiedList).add("one");
	    Mockito.verify(spiedList).add("two");
	 
	    assertEquals(2, spiedList.size());
	 
	    Mockito.doReturn(100).when(spiedList).size();
	    assertEquals(100, spiedList.size());
	}

}
